[{"path":"https://rjdverse.github.io/rjd3bench/articles/rjd3bench.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Temporal disaggregation and Benchmarking methods based on JDemetra+ v3.x","text":"methods implemented package rjd3bench intend bridge gap lack high frequency time series temporal /contemporaneous inconsistencies high frequency series corresponding low frequency series. Although can issue fields research dealing time series, methods temporal disaggregation, benchmarking, reconciliation calendarization often encountered production official statistics. example, National Accounts often compiled according two frequencies production: annual series, low frequency data, based precise detailed sources quarterly series, high frequency data, usually rely less accurate sources give information timelier basis. case, use temporal disaggregation, benchmarking, /reconciliation method can used achieve consistency annual quarterly national accounts time. package rjd3bench R interface highly efficient algorithms modeling developed official ‘JDemetra+ 3.0’ Seasonal adjustement software. provides wide variety methods, included suggested ESS guidelines temporal disaggregation, benchmarking reconciliation (Eurostat, 2018).","code":""},{"path":"https://rjdverse.github.io/rjd3bench/articles/rjd3bench.html","id":"set-up-data","dir":"Articles","previous_headings":"","what":"Set-up & Data","title":"Temporal disaggregation and Benchmarking methods based on JDemetra+ v3.x","text":"illustrate various methods using two datasets: retail dataset contains monthly figures retail activity various categories goods services 1992 2010. qna_data list two datasets. first data set ‘B1G_Y_data’ includes three annual benchmark series Belgian annual value added period 2009-2020 chemical industry (CE), construction (FF) transport services (HH). second data set ‘TURN_Q_data’ includes corresponding quarterly indicators (modified) production indicators derived VAT statistics covering period 2009Q1-2021Q4.","code":"library(\"rjd3bench\") retail <- rjd3toolkit::retail qna_data <- rjd3bench::qna_data"},{"path":[]},{"path":"https://rjdverse.github.io/rjd3bench/articles/rjd3bench.html","id":"chow-lin-fernandez-and-litterman","dir":"Articles","previous_headings":"Temporal disaggregation methods","what":"Chow-Lin, Fernandez and Litterman","title":"Temporal disaggregation and Benchmarking methods based on JDemetra+ v3.x","text":"Eurostat (2018) recommends use regression-based models purpose temporal disaggregation. Among , retrieve Chow-Lin method variants Fernandez Litterman. Let YTY_T, T=1,...,mT=1,...,m, xtx_t, t=1,...,nt=1,...,n, , respectively observed low frequency benchmark high-frequency indicator unknown high frequency variable yty_t. Chow-Lin, Fernandez Litterman can expressed equation, different models error term: yt=xtβ+ut y_t = x_t\\beta+u_t  ut=ϕut−1+ϵtu_t = \\phi u_{t-1} + \\epsilon_t, |ϕ|<1|\\phi| < 1 (Chow-Lin), ut=ut−1+ϵtu_t = u_{t-1} + \\epsilon_t (Fernandez), ut=ut−1+ϕ(Δut−1)+ϵtu_t = u_{t-1} + \\phi(\\Delta u_{t-1}) + \\epsilon_t, |ϕ|<1|\\phi| < 1 (Litterman) xtx_t observed high frequency, yty_t observed low frequency, therefore number effective observations estimate parameters number observations low-frequency benchmark. Regression-based methods can called temporaldisaggregation() function. output temporaldisaggregation() function contains important information regression including estimates model coefficients covariance matrix, decomposition disaggregated series information residuals. print(), summary() plot() functions can also applied output object. plot() function displays decomposition disaggregated series regression smoothing effect.","code":"# Example: Use of Fernandez variant to disaggregate annual value added in construction sector using a quarterly indicator Y <- ts(qna_data$B1G_Y_data[, \"B1G_FF\"], frequency=1, start=c(2009, 1)) x <- ts(qna_data$TURN_Q_data[, \"TURN_INDEX_FF\"], frequency=4, start=c(2009, 1)) td_fern <- rjd3bench::temporaldisaggregation(Y, indicators=x, model = \"Rw\")  y_fern <- td_fern$estimation$disagg # the disaggregated series summary(td_fern) plot(td_fern)"},{"path":"https://rjdverse.github.io/rjd3bench/articles/rjd3bench.html","id":"model-based-denton","dir":"Articles","previous_headings":"Temporal disaggregation methods","what":"Model-based Denton","title":"Temporal disaggregation and Benchmarking methods based on JDemetra+ v3.x","text":"Denton method variants usually expressed mathematical terms constrained minimization problem. example, widely used Denton proportional first difference (PFD) method usually expressed follows: minyt∑t=2n[ytxt−yt−1xt−1]2 min_{y_t}\\sum^n_{t=2}\\biggl[\\frac{y_t}{x_t}-\\frac{y_{t-1}}{x_{t-1}}\\biggr]^2  subject temporal constraint (flow variables) ∑tyt=YT \\sum_{t} y_t = Y_T  yty_t value estimate high frequency series period t, xtx_t value high frequency indicator period t YTY_T value low frequency series (.e. benchmark series) period T. Equivalently, Denton PFD method can also expressed statistical model considering following state space representation $$ \\begin{aligned} y_t &= \\beta_t x_t \\\\ \\beta_{t+1} &= \\beta_t + \\varepsilon_t \\qquad \\varepsilon_t \\sim {\\sf NID}(0, \\sigma^2_{\\varepsilon}) \\end{aligned} $$ temporal constraints taken care considering cumulated series ytcy^c_t instead original series yty_t. Hence, last high frequency period (example, last quarter year) observed corresponds value benchmark. value periods initially defined missing estimated maximum likelihood. alternative representation Denton PFD method interesting allows flexibility. might now include outliers - namely, level shift(s) Benchmark Indicator ratio - otherwise induce undesirable wave effects. Outliers intensity defined changing value innovation variances. also possibility freeze disaggregated series specific period(s) prior certain date fixing high-frequency BI ratio(s). Following principle movement preservation inherent Denton, model-based Denton PFD method constitutes interesting alternative temporal disaggregation benchmarking. link presentation subject include comparison regression-based methods temporal disaggregation. model-base Denton method can applied denton_modelbased() function. output denton_modelbased() function contains information disaggregated series BI ratio well respecting errors making possible construct confidence intervals. print(), summary() plot() functions can also applied output object.plot() function displays disaggregated series BI ratio together respective 95% confidence interval.","code":"# Example: Use of model-based Denton for temporal disaggregation Y <- ts(qna_data$B1G_Y_data[, \"B1G_FF\"], frequency=1, start=c(2009, 1)) x <- ts(qna_data$TURN_Q_data[, \"TURN_INDEX_FF\"], frequency=4, start=c(2009, 1)) td_mbd <- rjd3bench::denton_modelbased(Y, x, outliers = list(\"2020-01-01\"=100, \"2020-04-01\"=100))  y_mbd <- td_mbd$estimation$disagg plot(td_mbd)"},{"path":"https://rjdverse.github.io/rjd3bench/articles/rjd3bench.html","id":"autoregressive-distributed-lag-adl-models","dir":"Articles","previous_headings":"Temporal disaggregation methods","what":"Autoregressive Distributed Lag (ADL) Models","title":"Temporal disaggregation and Benchmarking methods based on JDemetra+ v3.x","text":"(Upcoming content)","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3bench/articles/rjd3bench.html","id":"denton","dir":"Articles","previous_headings":"Benchmarking methods","what":"Denton","title":"Temporal disaggregation and Benchmarking methods based on JDemetra+ v3.x","text":"Denton methods relies principle movement preservation. exist several variants corresponding different definitions movement preservation: additive first difference (AFD), proportional first difference (PFD), additive second difference (ASD), proportional second difference (PSD). widely used Denton PFD variant. Let YTY_T, T=1,...,mT=1,...,m, xtx_t, t=1,...,nt=1,...,n, , respectively temporal benchmarks high-frequency preliminary values unknown target variable yty_t. objective function Denton PFD method follows (considering small modification suggested Cholette deal starting conditions problem): minyt∑t=2n[ytxt−yt−1xt−1]2 min_{y_t}\\sum^n_{t=2}\\biggl[\\frac{y_t}{x_t}-\\frac{y_{t-1}}{x_{t-1}}\\biggr]^2  objective function minimized subject temporal aggregation constraints ∑tϵT=YT\\sum_{t\\epsilon T}=Y_T, T=1,...,mT=1,...,m (flows variables). words, benchmarked series estimated way “Benchmark--Indicator” ratio ytxt\\frac{y_t}{x_t} remains smooth possible, often key interest benchmarking. literature (see example Di Fonzo Marini, 2011), Denton PFD generally considered good approximation GRP method, meaning preserves period--period growth rates preliminary series. also argued many applications, Denton PFD appropriate GRP method deals linear problem computationally easier, suffer issues related time irreversibility singular objective function yty_t approaches 0 (see Daalmans et al, 2018). Denton methods can called denton() function. denton() function returns benchmarked high frequency series.","code":"# Example: use Denton method for benchmarking Y <- ts(qna_data$B1G_Y_data[, \"B1G_HH\"], frequency=1, start=c(2009, 1))  y_den0 <- rjd3bench::denton(t=Y, nfreq=4) # denton PFD without high frequency series  x <- y_den0 + rnorm(n=length(y_den0), mean=0, sd=10) y_den1 <- rjd3bench::denton(s=x, t=Y) # denton PFD (= the default) y_den2 <- rjd3bench::denton(s=x, t=Y, d=2, mul=FALSE) # denton ASD"},{"path":"https://rjdverse.github.io/rjd3bench/articles/rjd3bench.html","id":"grp","dir":"Articles","previous_headings":"Benchmarking methods","what":"Growth rate preservation (GRP)","title":"Temporal disaggregation and Benchmarking methods based on JDemetra+ v3.x","text":"GRP explicitly preserves period--period growth rates preliminary series. Let YTY_T, T=1,...,mT=1,...,m, xtx_t, t=1,...,nt=1,...,n, , respectively temporal benchmarks high-frequency preliminary values unknown target variable yty_t. Cauley Trager(1981) consider following objective function: f(x)=∑t=2n(ytyt−1−xtxt−1)2 f(x) = \\sum_{t=2}^{n}\\left(\\frac{y_t}{y_{t-1}} - \\frac{x_t}{x_{t-1}}\\right)^2  look values yt*y_t^*, t=1,...,nt=1,...,n, minimize subject temporal aggregation constraints ∑tϵT=YT\\sum_{t\\epsilon T}=Y_T, T=1,...,mT=1,...,m (flows variables). words, benchmarked series estimated way temporal dynamics; expressed growth rates yt*yt−1*\\frac{y_t^*}{y_{t-1}^*}, t=2,...,nt=2,...,n, “close possible” temporal dynamics preliminary series, “distance” preliminary growth rates xtxt−1\\frac{x_t}{x_{t-1}} given sum squared differences. (Di Fonzo, Marini, 2011) objective function considered Cauley Trager natural measure movement time series one expect, usually slightly better Denton PFD method preserving movement series (Di Fonzo, Marini, 2011). However, unlike Denton PFD method deals linear problem, GRP solves difficult nonlinear problem. Furthermore, GRP method suffers couple drawbacks, time irreversibility potential singularities objective function yt−1y_{t-1} approaches 0, lead undesirable results (see Daalmans et al, 2018). GRP method, corresponding method Cauley Trager, using solution proposed Di Fonzo Marini (2011), can called grp() function. grp() function returns high frequency series benchmarked GRP method.","code":"# Example: use GRP method for benchmarking Y <- ts(qna_data$B1G_Y_data[, \"B1G_HH\"], frequency=1, start=c(2009, 1)) y_den0 <- rjd3bench::denton(t=Y, nfreq=4) x <- y_den0 + rnorm(n=length(y_den0), mean=0, sd=10)  y_grp <- rjd3bench::grp(s=x, t=Y)"},{"path":"https://rjdverse.github.io/rjd3bench/articles/rjd3bench.html","id":"cubic-splines","dir":"Articles","previous_headings":"Benchmarking methods","what":"Cubic splines","title":"Temporal disaggregation and Benchmarking methods based on JDemetra+ v3.x","text":"Cubic splines piecewise cubic functions linked together way guarantee smoothness data points. Additivity constraints added benchmarking purpose sub-period estimates derived spline. sub-period indicator (disaggregated series) used, cubic splines longer drawn based low frequency data Benchmark--Indicator (BI ratio) one smoothed. Sub-period estimates simply product smoothed high frequency BI ratio indicator. method can called cubicspline() function. examples use : cubicspline() function returns high frequency series benchmarked cubic spline method.","code":"y_cs1<-rjd3bench::cubicspline(t=Y, nfreq=4) # example of cubic spline without high frequency series (smoothing)  x<-y_cs1+rnorm(n=length(y_cs1), mean=0, sd=10) y_cs2<-rjd3bench::cubicspline(s=x, t=Y) # example of cubic spline with a high frequency series to benchmark"},{"path":"https://rjdverse.github.io/rjd3bench/articles/rjd3bench.html","id":"cholette-method","dir":"Articles","previous_headings":"Benchmarking methods","what":"Cholette method","title":"Temporal disaggregation and Benchmarking methods based on JDemetra+ v3.x","text":"(Upcoming content)","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3bench/articles/rjd3bench.html","id":"multivariate-cholette","dir":"Articles","previous_headings":"Reconciliation and multivariate temporal disaggregation","what":"Multivariate Cholette","title":"Temporal disaggregation and Benchmarking methods based on JDemetra+ v3.x","text":"(Upcoming content)","code":""},{"path":"https://rjdverse.github.io/rjd3bench/articles/rjd3bench.html","id":"calendarization","dir":"Articles","previous_headings":"","what":"Calendarization","title":"Temporal disaggregation and Benchmarking methods based on JDemetra+ v3.x","text":"(Upcoming content)","code":""},{"path":"https://rjdverse.github.io/rjd3bench/articles/rjd3bench.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Temporal disaggregation and Benchmarking methods based on JDemetra+ v3.x","text":"Causey, B., Trager, M.L. (1981). Derivation Solution Benchmarking Problem: Trend Revision. Unpublished research notes, U.S. Census Bureau, Washington D.C. Available appendix Bozik Otto (1988). Chamberlin, G. (2010). Temporal disaggregation. ONS Economic & Labour Market Review. Di Fonzo, T., Marini, M. (2011). Newton’s Method Benchmarking Time Series according Growth Rates Preservation Principle. IMF WP/11/179. Daalmans, J., Di Fonzo, T., Mushkudiani, N., Bikker, R. (2018). Growth Rates Preservation (GRP) temporal benchmarking: Drawbacks alternative solutions. Survey Methodology, June 2018 Vol.44, .1, pp. 43-60 Statistics Canada, Catalogue . 12-001-X.","code":""},{"path":"https://rjdverse.github.io/rjd3bench/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jean Palate. Author. Corentin Lemasson. Maintainer, contributor. Tanguy Barthelemy. Contributor, artist.","code":""},{"path":"https://rjdverse.github.io/rjd3bench/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Palate J (2024). rjd3bench: Interface 'JDemetra+ 3.x' time series analysis software. R package version 2.1.0.9000, https://rjdverse.github.io/rjd3bench/, https://github.com/rjdverse/rjd3bench.","code":"@Manual{,   title = {rjd3bench: Interface to 'JDemetra+ 3.x' time series analysis software},   author = {Jean Palate},   year = {2024},   note = {R package version 2.1.0.9000,     https://rjdverse.github.io/rjd3bench/},   url = {https://github.com/rjdverse/rjd3bench}, }"},{"path":"https://rjdverse.github.io/rjd3bench/index.html","id":"rjd3bench-","dir":"","previous_headings":"","what":"Interface to JDemetra+ 3.x time series analysis software","title":"Interface to JDemetra+ 3.x time series analysis software","text":"Temporal disaggregation benchmarking JDemetra+ v3.x algorithms. Benchmarking: Denton Cholette (incl. multi-variate) Cubic Splines GRP (Growth Rate Preservation) Calendarization Temporal disaggregation Chow-Lin Fernandez Litterman Model Based Denton ADL (Autoregressive Distributed Lag Models)","code":""},{"path":"https://rjdverse.github.io/rjd3bench/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Interface to JDemetra+ 3.x time series analysis software","text":"Running rjd3 packages requires Java 17 higher. set configuration R explained ","code":""},{"path":"https://rjdverse.github.io/rjd3bench/index.html","id":"latest-release","dir":"","previous_headings":"Installation","what":"Latest release","title":"Interface to JDemetra+ 3.x time series analysis software","text":"get current stable version (latest release): GitHub: r-universe:","code":"# install.packages(\"remotes\") remotes::install_github(\"rjdverse/rjd3toolkit@*release\") remotes::install_github(\"rjdverse/rjd3bench@*release\") install.packages(\"rjd3bench\", repos = c(\"https://rjdverse.r-universe.dev\", \"https://cloud.r-project.org\"))"},{"path":"https://rjdverse.github.io/rjd3bench/index.html","id":"development-version","dir":"","previous_headings":"Installation","what":"Development version","title":"Interface to JDemetra+ 3.x time series analysis software","text":"get current development version GitHub:","code":"# install.packages(\"remotes\") remotes::install_github(\"rjdverse/rjd3bench\")"},{"path":"https://rjdverse.github.io/rjd3bench/index.html","id":"package-maintenance-and-contributing","dir":"","previous_headings":"","what":"Package Maintenance and contributing","title":"Interface to JDemetra+ 3.x time series analysis software","text":"contribution welcome done pull requests /issues. pull requests include updated tests updated documentation. functionality changed, docstrings added updated.","code":""},{"path":"https://rjdverse.github.io/rjd3bench/index.html","id":"licensing","dir":"","previous_headings":"","what":"Licensing","title":"Interface to JDemetra+ 3.x time series analysis software","text":"code project licensed European Union Public Licence (EUPL).","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/adl_disaggregation.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporal disaggregation of a time series with ADL models — adl_disaggregation","title":"Temporal disaggregation of a time series with ADL models — adl_disaggregation","text":"Temporal disaggregation time series ADL models","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/adl_disaggregation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporal disaggregation of a time series with ADL models — adl_disaggregation","text":"","code":"adl_disaggregation(   series,   constant = TRUE,   trend = FALSE,   indicators = NULL,   conversion = c(\"Sum\", \"Average\", \"Last\", \"First\", \"UserDefined\"),   conversion.obsposition = 1,   phi = 0,   phi.fixed = FALSE,   phi.truncated = 0,   xar = c(\"FREE\", \"SAME\", \"NONE\") )"},{"path":"https://rjdverse.github.io/rjd3bench/reference/adl_disaggregation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temporal disaggregation of a time series with ADL models — adl_disaggregation","text":"xar","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/adl_disaggregation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temporal disaggregation of a time series with ADL models — adl_disaggregation","text":"","code":"# qna data, fernandez with/without quarterly indicator data(\"qna_data\") Y<-ts(qna_data$B1G_Y_data[,\"B1G_FF\"], frequency=1, start=c(2009,1)) x<-ts(qna_data$TURN_Q_data[,\"TURN_INDEX_FF\"], frequency=4, start=c(2009,1)) td1<-rjd3bench::adl_disaggregation(Y, indicators=x, xar=\"FREE\") td2<-rjd3bench::adl_disaggregation(Y, indicators=x, xar=\"SAME\")"},{"path":"https://rjdverse.github.io/rjd3bench/reference/calendarization.html","id":null,"dir":"Reference","previous_headings":"","what":"Calendarization — calendarization","title":"Calendarization — calendarization","text":"Based \"Calendarization splines state space models\" B. Quenneville, F.Picard S.Fortier Appl. Statistics (2013) 62, part 3, pp 371-399. State space implementation.","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/calendarization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calendarization — calendarization","text":"","code":"calendarization(   calendarobs,   freq,   start = NULL,   end = NULL,   dailyweights = NULL,   stde = FALSE )"},{"path":"https://rjdverse.github.io/rjd3bench/reference/calendarization.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calendarization — calendarization","text":"calendarobs Observations (list start, end, value). See example. freq Annual frequency. 0, daily series computed start Starting day calendarization. calendar obs (extrapolation) end Final day calendarization. calendar obs (extrapolation) dailyweights Daily weights. length requested series stde","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/calendarization.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calendarization — calendarization","text":"","code":"obs<-list(     list(start=\"1980-01-01\", end=\"1989-12-31\", value=100),     list(start=\"1990-01-01\", end=\"1999-12-31\", value=-10),     list(start=\"2000-01-01\", end=\"2002-12-31\", value=50)) cal<-calendarization(obs, 4, end=\"2003-12-31\", stde=TRUE) Q<-cal$rslt eQ<-cal$erslt"},{"path":"https://rjdverse.github.io/rjd3bench/reference/cholette.html","id":null,"dir":"Reference","previous_headings":"","what":"Cholette method — cholette","title":"Cholette method — cholette","text":"Benchmarking means Cholette method.","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/cholette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cholette method — cholette","text":"","code":"cholette(   s,   t,   rho = 1,   lambda = 1,   bias = \"None\",   conversion = \"Sum\",   obsposition = 1 )"},{"path":"https://rjdverse.github.io/rjd3bench/reference/cholette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cholette method — cholette","text":"s Disaggregated series. Mandatory t Aggregation constraint. Mandatory obsposition Postion observation aggregated period (used \"UserDefined\" conversion)","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/cholette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cholette method — cholette","text":"$$\\sum_{,t}\\left(\\left(\\frac{{x_{,t}-z}_{,t}}{\\left|z_{,t}\\right|^\\lambda}\\right)-\\rho\\left(\\frac{{x_{,t-1}-z}_{,t-1}}{\\left|z_{,t-1}\\right|^\\lambda}\\right)\\right)^2$$","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/cubicspline.html","id":null,"dir":"Reference","previous_headings":"","what":"Benchmarking by means of cubic splines — cubicspline","title":"Benchmarking by means of cubic splines — cubicspline","text":"Cubic splines piecewise cubic functions linked together way guarantee smoothness data points. Additivity constraints added benchmarking purpose sub-period estimates derived spline. sub-period indicator (disaggregated series) used, cubic splines longer drawn based low frequency data Benchmark--Indicator (BI ratio) one smoothed. Sub- period estimates simply product smoothed high frequency BI ratio indicator.","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/cubicspline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Benchmarking by means of cubic splines — cubicspline","text":"","code":"cubicspline(   s = NULL,   t,   nfreq = 4,   conversion = c(\"Sum\", \"Average\", \"Last\", \"First\", \"UserDefined\"),   obsposition = 1 )"},{"path":"https://rjdverse.github.io/rjd3bench/reference/cubicspline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Benchmarking by means of cubic splines — cubicspline","text":"s Disaggregated series. NULL, must class t. t Aggregation constraint. Mandatory. must either object class ts numeric vector. nfreq Annual frequency disaggregated variable. Used disaggregated series provided. conversion Conversion rule. Usually \"Sum\" \"Average\". Sum default. obsposition Postion observation aggregated period (used \"UserDefined\" conversion)","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/cubicspline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Benchmarking by means of cubic splines — cubicspline","text":"benchmarked series returned","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/cubicspline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Benchmarking by means of cubic splines — cubicspline","text":"","code":"data(\"qna_data\") Y<-ts(qna_data$B1G_Y_data[,\"B1G_FF\"], frequency=1, start=c(2009,1))  # cubic spline without disaggregated series y1<-rjd3bench::cubicspline(t=Y, nfreq=4)  # cubic spline with disaggregated series x1<-y1+rnorm(n=length(y1), mean=0, sd=10) y2<-rjd3bench::cubicspline(s=x1, t=Y)  # cubic splines used for temporal disaggregation x2<-ts(qna_data$TURN_Q_data[,\"TURN_INDEX_FF\"], frequency=4, start=c(2009,1)) y3<-rjd3bench::cubicspline(s=x2, t=Y)"},{"path":"https://rjdverse.github.io/rjd3bench/reference/denton.html","id":null,"dir":"Reference","previous_headings":"","what":"Benchmarking by means of the Denton method. — denton","title":"Benchmarking by means of the Denton method. — denton","text":"Denton method relies principle movement preservation. exist variants corresponding different definitions movement preservation: additive first difference (AFD), proportional first difference (PFD), additive second difference (ASD), proportional second difference (PSD), etc. default widely used Denton PFD method.","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/denton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Benchmarking by means of the Denton method. — denton","text":"","code":"denton(   s = NULL,   t,   d = 1,   mul = TRUE,   nfreq = 4,   modified = TRUE,   conversion = c(\"Sum\", \"Average\", \"Last\", \"First\", \"UserDefined\"),   obsposition = 1 )"},{"path":"https://rjdverse.github.io/rjd3bench/reference/denton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Benchmarking by means of the Denton method. — denton","text":"s Preliminary series. NULL, must class t. t Aggregation constraint. Mandatory. must either object class ts numeric vector. d Differencing order. 1 default. mul Multiplicative additive benchmarking. Multiplicative default. nfreq Annual frequency disaggregated variable. Used disaggregated series provided. modified Modified (TRUE) unmodified (FALSE) Denton. Modified default. conversion Conversion rule. Usually \"Sum\" \"Average\". Sum default. obsposition Position observation aggregated period (used \"UserDefined\" conversion).","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/denton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Benchmarking by means of the Denton method. — denton","text":"benchmarked series returned","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/denton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Benchmarking by means of the Denton method. — denton","text":"","code":"Y <- ts(qna_data$B1G_Y_data$B1G_FF, frequency=1, start=c(2009,1))  # denton PFD without high frequency series y1 <- rjd3bench::denton(t=Y, nfreq=4)  # denton PFD with high frequency series x <- y1 + rnorm(n=length(y1), mean=0, sd=10) y2 <- rjd3bench::denton(s=x, t=Y)  # denton ASD y3 <- rjd3bench::denton(s=x, t=Y, d=2, mul=FALSE)"},{"path":"https://rjdverse.github.io/rjd3bench/reference/denton_modelbased.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporal disaggregation of a time series by model-based Denton proportional method — denton_modelbased","title":"Temporal disaggregation of a time series by model-based Denton proportional method — denton_modelbased","text":"Denton proportional method can expressed statistical model State space representation (see documentation definition states). approach interesting allows flexibility model inclusion outliers (level shift Benchmark Indicator ratio) otherwise induce unintended wave effects standard Denton method. Outliers intensity defined changing value 'innovation variances'.","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/denton_modelbased.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporal disaggregation of a time series by model-based Denton proportional method — denton_modelbased","text":"","code":"denton_modelbased(   series,   indicator,   differencing = 1,   conversion = c(\"Sum\", \"Average\", \"Last\", \"First\", \"UserDefined\"),   conversion.obsposition = 1,   outliers = NULL,   fixedBIratios = NULL )"},{"path":"https://rjdverse.github.io/rjd3bench/reference/denton_modelbased.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temporal disaggregation of a time series by model-based Denton proportional method — denton_modelbased","text":"series Aggregation constraint. Mandatory. must either object class ts numeric vector. indicator High-frequency indicator. Mandatory. must class series differencing implemented yet. Keep equals 1 (Denton PFD method). conversion Conversion rule. Usually \"Sum\" \"Average\". Sum default. conversion.obsposition Position observation aggregated period (used \"UserDefined\" conversion) outliers list structured definition outlier periods intensity. period must submitted first format YYYY-MM-DD enclosed quotation marks. must followed equal sign intensity outlier, defined relative value 'innovation variances' (1= normal situation) fixedBIratios list structured definition periods BI ratios must fixed. period must submitted first format YYYY-MM-DD enclosed quotation marks. must followed equal sign value BI ratio.","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/denton_modelbased.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Temporal disaggregation of a time series by model-based Denton proportional method — denton_modelbased","text":"object class 'JD3MBDenton'","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/denton_modelbased.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temporal disaggregation of a time series by model-based Denton proportional method — denton_modelbased","text":"","code":"# retail data, monthly indicator Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::aggregate(rjd3toolkit::retail$FoodAndBeverageStores, 4) td<-rjd3bench::denton_modelbased(Y, x, outliers = list(\"2000-01-01\"=100, \"2005-07-01\"=100)) y<-td$estimation$edisagg  # qna data, quarterly indicator data(\"qna_data\") Y<-ts(qna_data$B1G_Y_data[,\"B1G_FF\"], frequency=1, start=c(2009,1)) x<-ts(qna_data$TURN_Q_data[,\"TURN_INDEX_FF\"], frequency=4, start=c(2009,1))  td1<-rjd3bench::denton_modelbased(Y, x) td2<-rjd3bench::denton_modelbased(Y, x,                                   outliers=list(\"2020-04-01\"=100),                                   fixedBIratios=list(\"2021-04-01\"=39.0))  bi1<-td1$estimation$biratio bi2<-td2$estimation$biratio y1<-td1$estimation$disagg y2<-td2$estimation$disagg if (FALSE) { # \\dontrun{ ts.plot(bi1,bi2,gpars=list(col=c(\"red\",\"blue\"))) ts.plot(y1,y2,gpars=list(col=c(\"red\",\"blue\"))) } # }"},{"path":"https://rjdverse.github.io/rjd3bench/reference/grp.html","id":null,"dir":"Reference","previous_headings":"","what":"Benchmarking following the growth rate preservation principle. — grp","title":"Benchmarking following the growth rate preservation principle. — grp","text":"GRP method explicitly preserves period--period growth rates preliminary series. corresponds method Cauley Trager (1981), using solution proposed Di Fonzo Marini (2011). BFGS used line-search algorithm reduced unconstrained minimization problem.","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/grp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Benchmarking following the growth rate preservation principle. — grp","text":"","code":"grp(   s,   t,   conversion = c(\"Sum\", \"Average\", \"Last\", \"First\", \"UserDefined\"),   obsposition = 1,   eps = 1e-12,   iter = 500,   dentoninitialization = TRUE )"},{"path":"https://rjdverse.github.io/rjd3bench/reference/grp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Benchmarking following the growth rate preservation principle. — grp","text":"s Preliminary series. Mandatory. must ts object. t Aggregation constraint. Mandatory. must ts object. conversion Conversion rule. \"Sum\" default. obsposition Position observation aggregated period (used \"UserDefined\" conversion) eps Numeric. Defines convergence precision. BFGS algorithm run reduction objective within eps value (1e-12 default) maximum number iterations hit. iter Integer. Maximum number iterations BFGS algorithm (500 default). dentoninitialization indicate whether series benchmarked via modified Denton PFD used starting values GRP optimization procedure (TRUE/FALSE, TRUE default). FALSE, average benchmark used flow variables (e.g. t/4 quarterly series annual constraints conversion = 'Sum'), benchmark stock variables.","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/grp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Benchmarking following the growth rate preservation principle. — grp","text":"benchmarked series returned","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/grp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Benchmarking following the growth rate preservation principle. — grp","text":"Causey, B., Trager, M.L. (1981). Derivation Solution   Benchmarking Problem: Trend Revision. Unpublished research notes, U.S.   Census Bureau, Washington D.C. Available appendix Bozik Otto   (1988). Di Fonzo, T., Marini, M. (2011). Newton's Method Benchmarking   Time Series according Growth Rates Preservation Principle. *IMF   WP/11/179*.","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/grp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Benchmarking following the growth rate preservation principle. — grp","text":"","code":"data(\"qna_data\") Y <- ts(qna_data$B1G_Y_data[,\"B1G_FF\"], frequency=1, start=c(2009,1)) x <- rjd3bench::denton(t=Y, nfreq=4) + rnorm(n=length(Y)*4, mean=0, sd=10) y_grp <- rjd3bench::grp(s=x, t=Y)"},{"path":"https://rjdverse.github.io/rjd3bench/reference/multivariatecholette.html","id":null,"dir":"Reference","previous_headings":"","what":"Multi-variate Cholette — multivariatecholette","title":"Multi-variate Cholette — multivariatecholette","text":"Multi-variate Cholette","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/multivariatecholette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi-variate Cholette — multivariatecholette","text":"","code":"multivariatecholette(   xlist,   tcvector = NULL,   ccvector = NULL,   rho = 1,   lambda = 1 )"},{"path":"https://rjdverse.github.io/rjd3bench/reference/multivariatecholette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi-variate Cholette — multivariatecholette","text":"lambda","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/plot.JD3AdlDisagg.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for object of class JD3AdlDisagg — plot.JD3AdlDisagg","title":"Plot function for object of class JD3AdlDisagg — plot.JD3AdlDisagg","text":"Plot function object class JD3AdlDisagg","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/plot.JD3AdlDisagg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for object of class JD3AdlDisagg — plot.JD3AdlDisagg","text":"","code":"# S3 method for class 'JD3AdlDisagg' plot(x, ...)"},{"path":"https://rjdverse.github.io/rjd3bench/reference/plot.JD3AdlDisagg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for object of class JD3AdlDisagg — plot.JD3AdlDisagg","text":"x object class JD3AdlDisagg ... arguments pass ts.plot.","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/plot.JD3AdlDisagg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot function for object of class JD3AdlDisagg — plot.JD3AdlDisagg","text":"","code":"Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::retail$FoodAndBeverageStores td<-rjd3bench::adl_disaggregation(Y, indicator=x, xar=\"FREE\") #> Warning: NaNs produced plot(td)"},{"path":"https://rjdverse.github.io/rjd3bench/reference/plot.JD3MBDenton.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for object of class JD3MBDenton — plot.JD3MBDenton","title":"Plot function for object of class JD3MBDenton — plot.JD3MBDenton","text":"Plot function object class JD3MBDenton","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/plot.JD3MBDenton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for object of class JD3MBDenton — plot.JD3MBDenton","text":"","code":"# S3 method for class 'JD3MBDenton' plot(x, ...)"},{"path":"https://rjdverse.github.io/rjd3bench/reference/plot.JD3MBDenton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for object of class JD3MBDenton — plot.JD3MBDenton","text":"x object class JD3MBDenton ... arguments pass ts.plot.","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/plot.JD3MBDenton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot function for object of class JD3MBDenton — plot.JD3MBDenton","text":"","code":"Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::retail$FoodAndBeverageStores td<-rjd3bench::temporaldisaggregationI(Y, indicator=x) plot(td)"},{"path":"https://rjdverse.github.io/rjd3bench/reference/plot.JD3TempDisagg.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for object of class JD3TempDisagg — plot.JD3TempDisagg","title":"Plot function for object of class JD3TempDisagg — plot.JD3TempDisagg","text":"Plot function object class JD3TempDisagg","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/plot.JD3TempDisagg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for object of class JD3TempDisagg — plot.JD3TempDisagg","text":"","code":"# S3 method for class 'JD3TempDisagg' plot(x, ...)"},{"path":"https://rjdverse.github.io/rjd3bench/reference/plot.JD3TempDisagg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for object of class JD3TempDisagg — plot.JD3TempDisagg","text":"x object class JD3TempDisagg ... arguments pass ts.plot.","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/plot.JD3TempDisagg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot function for object of class JD3TempDisagg — plot.JD3TempDisagg","text":"","code":"Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::retail$FoodAndBeverageStores td<-rjd3bench::temporaldisaggregation(Y, indicator=x) plot(td)"},{"path":"https://rjdverse.github.io/rjd3bench/reference/plot.JD3TempDisaggI.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for object of class JD3TempDisaggI — plot.JD3TempDisaggI","title":"Plot function for object of class JD3TempDisaggI — plot.JD3TempDisaggI","text":"Plot function object class JD3TempDisaggI","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/plot.JD3TempDisaggI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for object of class JD3TempDisaggI — plot.JD3TempDisaggI","text":"","code":"# S3 method for class 'JD3TempDisaggI' plot(x, ...)"},{"path":"https://rjdverse.github.io/rjd3bench/reference/plot.JD3TempDisaggI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for object of class JD3TempDisaggI — plot.JD3TempDisaggI","text":"x object class JD3TempDisaggI ... arguments pass ts.plot.","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/plot.JD3TempDisaggI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot function for object of class JD3TempDisaggI — plot.JD3TempDisaggI","text":"","code":"Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::retail$FoodAndBeverageStores td<-rjd3bench::temporaldisaggregationI(Y, indicator=x) plot(td)"},{"path":"https://rjdverse.github.io/rjd3bench/reference/print.JD3AdlDisagg.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for object of class JD3AdlDisagg — print.JD3AdlDisagg","title":"Print function for object of class JD3AdlDisagg — print.JD3AdlDisagg","text":"Print function object class JD3AdlDisagg","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/print.JD3AdlDisagg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for object of class JD3AdlDisagg — print.JD3AdlDisagg","text":"","code":"# S3 method for class 'JD3AdlDisagg' print(x, ...)"},{"path":"https://rjdverse.github.io/rjd3bench/reference/print.JD3AdlDisagg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for object of class JD3AdlDisagg — print.JD3AdlDisagg","text":"x object class JD3AdlDisagg","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/print.JD3AdlDisagg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print function for object of class JD3AdlDisagg — print.JD3AdlDisagg","text":"","code":"Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::retail$FoodAndBeverageStores td<-rjd3bench::adl_disaggregation(Y, indicator=x, xar=\"FREE\") #> Warning: NaNs produced print(td) #> Model: FREE  #>          coef       se         t #> 1 -1542.99264 1208.321 -1.276972 #> 2    15.74617      NaN       NaN #> 3   -15.59888      NaN       NaN #>  #> Use summary() for more details.  #> Use plot() to see the decomposition of the disaggregated series."},{"path":"https://rjdverse.github.io/rjd3bench/reference/print.JD3MBDenton.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for object of class JD3MBDenton — print.JD3MBDenton","title":"Print function for object of class JD3MBDenton — print.JD3MBDenton","text":"Print function object class JD3MBDenton","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/print.JD3MBDenton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for object of class JD3MBDenton — print.JD3MBDenton","text":"","code":"# S3 method for class 'JD3MBDenton' print(x, ...)"},{"path":"https://rjdverse.github.io/rjd3bench/reference/print.JD3MBDenton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for object of class JD3MBDenton — print.JD3MBDenton","text":"x object class JD3MBDenton ... arguments passed methods.","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/print.JD3MBDenton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print function for object of class JD3MBDenton — print.JD3MBDenton","text":"","code":"Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::aggregate(rjd3toolkit::retail$FoodAndBeverageStores, 4) td<-rjd3bench::denton_modelbased(Y, x,                                  outliers = list(\"2000-01-01\"=100, \"2005-07-01\"=100)) print(td) #> Available estimates: #> [1] \"disagg\"   \"edisagg\"  \"biratio\"  \"ebiratio\" #>  #> Use summary() for more details.  #> Use plot() to see the disaggregated series and BI ratio together with their respective confidence interval"},{"path":"https://rjdverse.github.io/rjd3bench/reference/print.JD3TempDisagg.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for object of class JD3TempDisagg — print.JD3TempDisagg","title":"Print function for object of class JD3TempDisagg — print.JD3TempDisagg","text":"Print function object class JD3TempDisagg","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/print.JD3TempDisagg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for object of class JD3TempDisagg — print.JD3TempDisagg","text":"","code":"# S3 method for class 'JD3TempDisagg' print(x, ...)"},{"path":"https://rjdverse.github.io/rjd3bench/reference/print.JD3TempDisagg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for object of class JD3TempDisagg — print.JD3TempDisagg","text":"x object class JD3TempDisagg ... arguments passed methods.","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/print.JD3TempDisagg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print function for object of class JD3TempDisagg — print.JD3TempDisagg","text":"","code":"Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::retail$FoodAndBeverageStores td<-rjd3bench::temporaldisaggregation(Y, indicator=x) print(td) #> Model: Ar1  #>               coef           se         t #> C    -1.381950e+05 53302.135401 -2.592672 #> var1  9.878368e+00     1.334654  7.401446 #>  #> Use summary() for more details.  #> Use plot() to see the decomposition of the disaggregated series."},{"path":"https://rjdverse.github.io/rjd3bench/reference/print.JD3TempDisaggI.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for object of class JD3TempDisaggI — print.JD3TempDisaggI","title":"Print function for object of class JD3TempDisaggI — print.JD3TempDisaggI","text":"Print function object class JD3TempDisaggI","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/print.JD3TempDisaggI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for object of class JD3TempDisaggI — print.JD3TempDisaggI","text":"","code":"# S3 method for class 'JD3TempDisaggI' print(x, ...)"},{"path":"https://rjdverse.github.io/rjd3bench/reference/print.JD3TempDisaggI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for object of class JD3TempDisaggI — print.JD3TempDisaggI","text":"x object class JD3TempDisaggI ... arguments passed methods.","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/print.JD3TempDisaggI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print function for object of class JD3TempDisaggI — print.JD3TempDisaggI","text":"","code":"Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::retail$FoodAndBeverageStores td<-rjd3bench::temporaldisaggregationI(Y, indicator=x) print(td) #>         coef #> a 26898.3587 #> b     0.0542 #>  #> Use summary() for more details.  #> Use plot() to visualize the disaggregated series."},{"path":"https://rjdverse.github.io/rjd3bench/reference/summary.JD3AdlDisagg.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for object of class JD3AdlDisagg — summary.JD3AdlDisagg","title":"Summary function for object of class JD3AdlDisagg — summary.JD3AdlDisagg","text":"Summary function object class JD3AdlDisagg","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/summary.JD3AdlDisagg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for object of class JD3AdlDisagg — summary.JD3AdlDisagg","text":"","code":"# S3 method for class 'JD3AdlDisagg' summary(object, ...)"},{"path":"https://rjdverse.github.io/rjd3bench/reference/summary.JD3AdlDisagg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for object of class JD3AdlDisagg — summary.JD3AdlDisagg","text":"object object class JD3AdlDisagg ... arguments passed methods.","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/summary.JD3AdlDisagg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary function for object of class JD3AdlDisagg — summary.JD3AdlDisagg","text":"","code":"Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::retail$FoodAndBeverageStores td<-rjd3bench::adl_disaggregation(Y, indicator=x) #> Warning: NaNs produced summary(td) #>  #> Likelihood statistics  #>  #> Number of observations:  19  #> Number of effective observations:  -1  #> Number of estimated parameters:  2  #> LogLikelihood:  -211.6667  #> Standard error:   #> AIC:  427.3333  #> BIC:  428.8785  #>  #>  #> Model: FREE  #> Rho : 0.98097  ( 0.01414316 ) #>  #>  #> Regression model  #>          coef       se         t #> 1 -1542.99264 1208.321 -1.276972 #> 2    15.74617      NaN       NaN #> 3   -15.59888      NaN       NaN"},{"path":"https://rjdverse.github.io/rjd3bench/reference/summary.JD3MBDenton.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for object of class JD3MBDenton — summary.JD3MBDenton","title":"Summary function for object of class JD3MBDenton — summary.JD3MBDenton","text":"Summary function object class JD3MBDenton","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/summary.JD3MBDenton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for object of class JD3MBDenton — summary.JD3MBDenton","text":"","code":"# S3 method for class 'JD3MBDenton' summary(object, ...)"},{"path":"https://rjdverse.github.io/rjd3bench/reference/summary.JD3MBDenton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for object of class JD3MBDenton — summary.JD3MBDenton","text":"object object class JD3MBDenton ... arguments passed methods.","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/summary.JD3MBDenton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary function for object of class JD3MBDenton — summary.JD3MBDenton","text":"","code":"Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::aggregate(rjd3toolkit::retail$FoodAndBeverageStores, 4) td<-rjd3bench::denton_modelbased(Y, x,                                  outliers = list(\"2000-01-01\"=100, \"2005-07-01\"=100)) summary(td) #>  #> Likelihood statistics  #>  #> Number of observations:  -1  #> Number of effective observations:  -1  #> Number of estimated parameters:  -1  #> Standard error:   #> AIC:  NaN  #> BIC:  NaN  #>  #>  #> Available estimates: #> [1] \"disagg\"   \"edisagg\"  \"biratio\"  \"ebiratio\""},{"path":"https://rjdverse.github.io/rjd3bench/reference/summary.JD3TempDisagg.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for object of class JD3TempDisagg — summary.JD3TempDisagg","title":"Summary function for object of class JD3TempDisagg — summary.JD3TempDisagg","text":"Summary function object class JD3TempDisagg","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/summary.JD3TempDisagg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for object of class JD3TempDisagg — summary.JD3TempDisagg","text":"","code":"# S3 method for class 'JD3TempDisagg' summary(object, ...)"},{"path":"https://rjdverse.github.io/rjd3bench/reference/summary.JD3TempDisagg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for object of class JD3TempDisagg — summary.JD3TempDisagg","text":"object object class JD3TempDisagg ... arguments passed methods.","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/summary.JD3TempDisagg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary function for object of class JD3TempDisagg — summary.JD3TempDisagg","text":"","code":"Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::retail$FoodAndBeverageStores td<-rjd3bench::temporaldisaggregation(Y, indicator=x) summary(td) #>  #> Likelihood statistics  #>  #> Number of observations:  19  #> Number of effective observations:  -1  #> Number of estimated parameters:  3  #> LogLikelihood:  -246.6473  #> Standard error:   #> AIC:  499.2945  #> BIC:  502.1278  #>  #>  #> Model: Ar1  #> Rho : 0.9809129  ( 0.004501273 ) #>  #>  #> Regression model  #>               coef           se         t #> C    -1.381950e+05 53302.135401 -2.592672 #> var1  9.878368e+00     1.334654  7.401446"},{"path":"https://rjdverse.github.io/rjd3bench/reference/summary.JD3TempDisaggI.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for object of class JD3TempDisaggI — summary.JD3TempDisaggI","title":"Summary function for object of class JD3TempDisaggI — summary.JD3TempDisaggI","text":"Summary function object class JD3TempDisaggI","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/summary.JD3TempDisaggI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for object of class JD3TempDisaggI — summary.JD3TempDisaggI","text":"","code":"# S3 method for class 'JD3TempDisaggI' summary(object, ...)"},{"path":"https://rjdverse.github.io/rjd3bench/reference/summary.JD3TempDisaggI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for object of class JD3TempDisaggI — summary.JD3TempDisaggI","text":"object object class JD3TempDisaggI ... arguments passed methods.","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/summary.JD3TempDisaggI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary function for object of class JD3TempDisaggI — summary.JD3TempDisaggI","text":"","code":"Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::retail$FoodAndBeverageStores td<-rjd3bench::temporaldisaggregationI(Y, indicator=x) summary(td) #>  #> Likelihood statistics  #>  #> Number of observations:  19  #> Number of effective observations:  -1  #> Number of estimated parameters:  4  #> LogLikelihood:  -189.6422  #> Standard error:   #> AIC:  387.2844  #> BIC:  390.8459  #>  #>  #> Model:  #>         coef #> a 26898.3587 #> b     0.0542"},{"path":"https://rjdverse.github.io/rjd3bench/reference/temporaldisaggregation.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporal disaggregation of a time series by regression models. — temporaldisaggregation","title":"Temporal disaggregation of a time series by regression models. — temporaldisaggregation","text":"Perform temporal disaggregation low frequency high frequency time series regression models. Models included Chow-Lin, Fernandez, Litterman variants algorithms.","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/temporaldisaggregation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporal disaggregation of a time series by regression models. — temporaldisaggregation","text":"","code":"temporaldisaggregation(   series,   constant = TRUE,   trend = FALSE,   indicators = NULL,   model = c(\"Ar1\", \"Rw\", \"RwAr1\"),   freq = 4,   conversion = c(\"Sum\", \"Average\", \"Last\", \"First\", \"UserDefined\"),   conversion.obsposition = 1,   rho = 0,   rho.fixed = FALSE,   rho.truncated = 0,   zeroinitialization = FALSE,   diffuse.algorithm = c(\"SqrtDiffuse\", \"Diffuse\", \"Augmented\"),   diffuse.regressors = FALSE )"},{"path":"https://rjdverse.github.io/rjd3bench/reference/temporaldisaggregation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temporal disaggregation of a time series by regression models. — temporaldisaggregation","text":"series time series disaggregated. must ts object. constant Constant term (T/F). used Ar1 model zeroinitialization=F trend Linear trend (T/F) indicators High-frequency indicator(s) used temporal disaggregation. must (list ) ts object(s). model Model error term (disaggregated level). \"Ar1\" = Chow-Lin, \"Rw\" = Fernandez, \"RwAr1\" = Litterman freq Annual frequency disaggregated variable. Used indicator provided conversion Conversion mode (Usually \"Sum\" \"Average\") conversion.obsposition used \"UserDefined\" mode. Position observed indicator aggregated periods (instance 7th month year) rho used Ar1/RwAr1 models. (Initial) value parameter rho.fixed Fixed rho (T/F, F default) rho.truncated Range Rho evaluation ([rho.truncated, 1[) zeroinitialization initial values auto-regressive model fixed 0 (T/F, F default) diffuse.algorithm Algorithm used diffuse initialization. \"SqrtDiffuse\" default diffuse.regressors Indicates coefficients regression model diffuse (T) fixed unknown (F, default)","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/temporaldisaggregation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Temporal disaggregation of a time series by regression models. — temporaldisaggregation","text":"object class \"JD3TempDisagg\"","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/temporaldisaggregation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temporal disaggregation of a time series by regression models. — temporaldisaggregation","text":"","code":"# retail data, chow-lin with monthly indicator Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::retail$FoodAndBeverageStores td<-rjd3bench::temporaldisaggregation(Y, indicators=x) y<-td$estimation$disagg  # qna data, fernandez with/without quarterly indicator data(\"qna_data\") Y<-ts(qna_data$B1G_Y_data[,\"B1G_FF\"], frequency=1, start=c(2009,1)) x<-ts(qna_data$TURN_Q_data[,\"TURN_INDEX_FF\"], frequency=4, start=c(2009,1)) td1<-rjd3bench::temporaldisaggregation(Y, indicators=x, model = \"Rw\") td2<-rjd3bench::temporaldisaggregation(Y, model = \"Rw\") mod1<- td1$regression$model"},{"path":"https://rjdverse.github.io/rjd3bench/reference/temporaldisaggregationI.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporal disaggregation using the model: x(t) = a + b y(t), where x(t) is the indicator, y(t) is the unknown target series, with low-frequency constraints on y. — temporaldisaggregationI","title":"Temporal disaggregation using the model: x(t) = a + b y(t), where x(t) is the indicator, y(t) is the unknown target series, with low-frequency constraints on y. — temporaldisaggregationI","text":"Temporal disaggregation using model: x(t) = + b y(t), x(t) indicator, y(t) unknown target series, low-frequency constraints y.","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/temporaldisaggregationI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporal disaggregation using the model: x(t) = a + b y(t), where x(t) is the indicator, y(t) is the unknown target series, with low-frequency constraints on y. — temporaldisaggregationI","text":"","code":"temporaldisaggregationI(   series,   indicator,   conversion = c(\"Sum\", \"Average\", \"Last\", \"First\", \"UserDefined\"),   conversion.obsposition = 1,   rho = 0,   rho.fixed = FALSE,   rho.truncated = 0 )"},{"path":"https://rjdverse.github.io/rjd3bench/reference/temporaldisaggregationI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temporal disaggregation using the model: x(t) = a + b y(t), where x(t) is the indicator, y(t) is the unknown target series, with low-frequency constraints on y. — temporaldisaggregationI","text":"series time series disaggregated. must ts object. indicator High-frequency indicator used temporal disaggregation. must ts object. conversion Conversion mode (Usually \"Sum\" \"Average\") conversion.obsposition used \"UserDefined\" mode. Position observed indicator aggregated periods (instance 7th month year) rho used Ar1/RwAr1 models. (Initial) value parameter rho.fixed Fixed rho (T/F, F default) rho.truncated Range Rho evaluation ([rho.truncated, 1[)","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/temporaldisaggregationI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Temporal disaggregation using the model: x(t) = a + b y(t), where x(t) is the indicator, y(t) is the unknown target series, with low-frequency constraints on y. — temporaldisaggregationI","text":"object class \"JD3TempDisaggI\"","code":""},{"path":"https://rjdverse.github.io/rjd3bench/reference/temporaldisaggregationI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temporal disaggregation using the model: x(t) = a + b y(t), where x(t) is the indicator, y(t) is the unknown target series, with low-frequency constraints on y. — temporaldisaggregationI","text":"","code":"# retail data, monthly indicator Y<-rjd3toolkit::aggregate(rjd3toolkit::retail$RetailSalesTotal, 1) x<-rjd3toolkit::retail$FoodAndBeverageStores td<-rjd3bench::temporaldisaggregationI(Y, indicator=x) y<-td$estimation$disagg  # qna data, quarterly indicator data(\"qna_data\") Y<-ts(qna_data$B1G_Y_data[,\"B1G_CE\"], frequency=1, start=c(2009,1)) x<-ts(qna_data$TURN_Q_data[,\"TURN_INDEX_CE\"], frequency=4, start=c(2009,1)) td<-rjd3bench::temporaldisaggregationI(Y, indicator=x) a<-td$regression$a b<-td$regression$b"}]
